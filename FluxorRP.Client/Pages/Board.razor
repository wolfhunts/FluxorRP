@page "/"
@using Fluxor
@using FluxorRP.Shared.Store.Dice
@using FluxorRP.Shared.Store.ListCharacter
@using FluxorRP.Shared.Store.ListMonster
@rendermode InteractiveWebAssembly
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager navigationManager
@inject IDispatcher Dispatcher

@inject IState<DiceState> DiceState
@inject IState<ListCharacterState> CharactersState
@inject IState<ListMonsterState> MonstersState


<PageTitle>Party</PageTitle>

@if (!EndOfGame)
{<div class="columns-container">
        @if (CharactersState.Value.selectedValue != 0 && MonstersState.Value.selectedValue != 0)
        {
            <div class="column">
                <FluxorRP.Client.Component.Character />
            </div>
            <div class="column">
                <FluxorRP.Client.Component.DiceLauncher />
            </div>
            <div class="column">
                <FluxorRP.Client.Component.Monster />
            </div>
        }
        else
        {
            <div class="column">
                @foreach (var Character in CharactersState.Value.Characters)
                {
                    <div class="form-check">
                        <input class="form-check-check" value="@Character.Id" type="checkbox" @onclick="() => SelectCharacter(Character.Id)"
                        checked="@(CharactersState.Value.selectedValue == Character.Id)"
                        ></input>
                        <label class="form-check-label">@Character.Name</label>
                    </div>
                }
            </div>
            <div class="column">
                @foreach (var Monster in MonstersState.Value.Monsters)
                {
                    <div class="form-check">
                        <input class="form-check-check" value="@Monster.Id" type="checkbox" @onclick="() => SelectMonster(Monster.Id)"
                        checked="@(MonstersState.Value.selectedValue == Monster.Id)"
                        ></input>
                        <label class="form-check-label">@Monster.Name</label>
                    </div>
                }
            </div>
        }
    </div>



} else
{
    <div>
        <strong>end of game</strong>
    </div>

    <div>
        @if (this.MonsterHealth > 0)
        {
            <strong>Monster Wins</strong>
        }
        else
        {
            <strong>Player Wins</strong>
        }
    </div>
    <div>
        <img src="images/gameover.gif" />
    </div>
    <button @onclick="Restart">Jouer à nouveau</button>
}


@code {
    public int Health { get; set; } = 0;
    public int MonsterHealth { get; set; } = 100;
    public bool EndOfGame { get; set; } = false;

    private void Restart()
    {
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    private void UpdateDiceValue(int newValue)
    {
        this.Health += newValue;

        Console.WriteLine(newValue.ToString());
    }

    private void AttackMonster(int attachValue)
    {
        this.MonsterHealth -= attachValue;
        this.Health -= attachValue / 2;

        this.EndOfGame = this.MonsterHealth < 0 || this.Health < 0;
    }
    private void SelectCharacter(int id)
    {
        Dispatcher.Dispatch(new ListCharacterSelectAction(id));
    }
    private void SelectMonster(int id)
    {
        Dispatcher.Dispatch(new ListMonsterSelectAction(id));
    }
}
